<ProxyEndpoint name='dispensary'>
  <Description>the inbound proxy endpoint, for dispensing tokens</Description>
  <HTTPProxyConnection>
    <BasePath>/oauth2-firebase-id</BasePath>
  </HTTPProxyConnection>

  <FaultRules/>

  <DefaultFaultRule name="fault-rule">
    <Step>
      <Name>AM-Inject-Proxy-Revision-Header</Name>
    </Step>
    <AlwaysEnforce>true</AlwaysEnforce>
  </DefaultFaultRule>

  <PreFlow name='PreFlow'>
    <Request>

      <Step>
        <Name>CORS-1</Name>
      </Step>

      <Step>
        <Name>RF-Invalid-Grant-Type</Name>
        <Condition>request.formparam.grant_type != "urn:ietf:params:oauth:grant-type:jwt-bearer"</Condition>
      </Step>
    </Request>

    <Response/>
  </PreFlow>

  <PostFlow name='PostFlow'>
    <Request/>
    <Response>
      <Step>
        <Name>AM-Clean-Response-Headers</Name>
        <Condition>request.verb != "OPTIONS"</Condition>
      </Step>

      <Step>
        <Name>AM-Inject-Proxy-Revision-Header</Name>
      </Step>
      <Step>
        <Name>JS-Groom-Token-Response</Name>
        <Condition>apigee.access_token != null</Condition>
      </Step>
      <Step>
        <Name>AM-Token-Header</Name>
        <Condition>apigee.access_token != null</Condition>
      </Step>
    </Response>
  </PostFlow>

  <Flows>
    <Flow name='OAuth2.0 token dispenser - password grant'>
      <Description>dispense tokens for OAuth2.0, for password grant_type</Description>
      <!--
          An example request is like this:

          curl -i -X POST -H 'content-type: application/x-www-form-urlencoded' \
            '$endpoint/oauth2-firebase-id/token'\
            -d 'grant_type="urn:ietf:params:oauth:grant-type:jwt-bearer' \
            -d "client_id=$CLIENT_ID" \
            -d "assertion=$FIREBASE_ID_TOKEN"

          The resulting token will have an expiry, and a set of roles,
          as returned by the user authentication service.
      -->
      <Request>

        <!-- does the inbound request have user and client credentials? -->
        <Step>
          <Name>RF-Invalid-Authentication</Name>
          <Condition>(request.formparam.assertion = null) ||
             (request.formparam.client_id = null)</Condition>
        </Step>

        <Step>
          <Name>VerifyAPIKey-1</Name>
        </Step>
        <Step>
          <Name>AM-Diags</Name>
        </Step>

        <Step>
          <Name>VerifyJWT-Firebase-Id-Token</Name>
        </Step>

        <Step>
          <Name>AM-Request-for-Token-Params</Name>
        </Step>

        <Step>
          <!-- this policy generates a payload -->
          <Name>OAuthV2-GenerateAccessToken-PG</Name>
        </Step>
      </Request>

      <Response/>

      <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "urn:ietf:params:oauth:grant-type:jwt-bearer")</Condition>
    </Flow>

    <Flow name='OAuth2.0 token dispenser - refresh'>
      <Description>dispense tokens for OAuth2.0, for refresh_token grant_type</Description>
      <!--
          An example request is like this:

          curl -i -X POST -H 'content-type: application/x-www-form-urlencoded' \
            -u ${client_id}:${client_secret} \
            'https://ORG-ENV.apigee.net/oauth2-pg/token'\
            -d 'grant_type=refresh_token&refresh_token=xxxx'
      -->
      <Request>
        <Step>
          <Name>RF-Invalid-Request</Name>
          <Condition>request.formparam.refresh_token = null</Condition>
        </Step>

        <Step>
          <!-- this policy generates a payload -->
          <Name>OAuthV2-RefreshAccessToken</Name>
        </Step>
      </Request>

      <Response/>

      <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "refresh_token")</Condition>
    </Flow>

    <Flow name='unknown request'>
      <Request>
        <Step>
          <Name>RF-Unknown-Request</Name>
        </Step>
      </Request>
      <Response/>
    </Flow>

  </Flows>

  <!-- There is no backend target. Responses for oauth token generation and
       refresh are direct from this API proxy.
  -->
  <RouteRule name='NoRouteRule'/>

</ProxyEndpoint>
